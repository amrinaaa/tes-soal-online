// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
}

model Test {
  id        String       @id @default(cuid())
  authorId String
  category  Category
  title     String
  testDescription String
  price     Decimal
  similarity Decimal
  worktime  Int
  review    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  author      Author         @relation(fields: [authorId], references: [id])
  multiplechoice Multiplechoice[]
  favourite      Favourite[]
  history      History[]
  result      Result[]
}

model History {
  id        String       @id @default(cuid())
  testId String
  userId String
  user      User         @relation(fields: [userId], references: [id])
  test      Test     @relation(fields: [testId], references: [id])
}

model User {
  id        String       @id @default(cuid())
  name      String
  email     String       @unique
  password  String
  role      Role         @default(USER)
  userPhoto String?
  adsBalance  Decimal
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  favourite      Favourite[]
  history      History[]
  result      Result[]
  testimoni      Testimoni[]
  author      Author[]
}

model Author {
  id        String       @id @default(cuid())
  userId String
  nama String
  handphoneNum String
  authorPhoto String?
  bank String
  accountBank String
  profit Int
  isApproved Boolean
  user      User         @relation(fields: [userId], references: [id])
  test      Test[]
}

model Favourite {
  id        String       @id @default(cuid())
  testId String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  test      Test     @relation(fields: [testId], references: [id])
}

model Multiplechoice {
  id       String   @id @default(cuid())
  testId   String
  question String
  number   Int
  questionPhoto    String
  weight   Int
  discussion String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  test      Test     @relation(fields: [testId], references: [id])
  option      Option[]
}

model Result {
  id       String   @id @default(cuid())
  testId String
  userId String
  score Int
  user      User         @relation(fields: [userId], references: [id])
  test      Test     @relation(fields: [testId], references: [id])
  detail_resultresult      Detail_result[]
}

model Detail_result {
  id       String   @id @default(cuid())
  resultId String
  userAnswer String
  result      Result     @relation(fields: [resultId], references: [id])
}

model Option {
  id       String   @id @default(cuid())
  multiplechoiceId String
  optionDescription String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isCorrect Boolean
  multiplechoice      Multiplechoice     @relation(fields: [multiplechoiceId], references: [id])
}

model Transaction {
  id       String   @id @default(cuid())
  testId String
  paymentMethod String
  paymentTime DateTime
  price Int
  total Int
  status String
}

model Testimoni {
  id       String   @id @default(cuid())
  userId String
  comment String
  user      User         @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

enum Category {
  CPNS
  UTBK
}